generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String    @id @default(cuid())
    username String    @unique
    password String
    isAdmin  Boolean   @default(false) @map("is_admin")
    Session  Session[]

    @@map("users")
}

model Session {
    id         String   @id @default(cuid())
    token      String   @unique
    expiryDate DateTime @map("expiry_date")

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Platform {
    id   Int    @id
    name String
    slug String @unique

    games GamePlatform[]
    files File[]

    data           Json?
    UnmatchedFiles UnmatchedFiles[]

    @@map("platforms")
}

model Game {
    id   Int    @id
    name String
    slug String @unique

    platforms GamePlatform[]
    files     File[]

    data Json?

    @@map("games")
}

model GamePlatform {
    game       Game     @relation(fields: [gameId], references: [id])
    gameId     Int
    platform   Platform @relation(fields: [platformId], references: [id])
    platformId Int

    @@id([gameId, platformId])
    @@map("game_platforms")
}

model File {
    path       String   @unique
    game       Game     @relation(fields: [gameId], references: [id])
    gameId     Int
    platform   Platform @relation(fields: [platformId], references: [id])
    platformId Int

    @@id([gameId, platformId])
    @@map("files")
}

model UnmatchedFiles {
    id String @id @default(cuid())

    path String @unique

    platform   Platform @relation(fields: [platformId], references: [id])
    platformId Int

    @@map("unmatched_files")
}
